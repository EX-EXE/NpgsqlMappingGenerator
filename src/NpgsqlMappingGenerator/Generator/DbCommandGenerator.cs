using CodeAnalyzeUtility;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using NpgsqlMappingGenerator.Utility;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Reflection;
using System.Text;
using System.Xml.Linq;
using static NpgsqlMappingGenerator.Utility.AnalyzeDbCommand;

namespace NpgsqlMappingGenerator.Generator;

public static class DbCommandGenerator
{
    private static readonly string[] DbCommandAttributeNames = new[]
    {
        $"{CommonDefine.Namespace}.{CommonDefine.DbCommandAttributeName}",
    };

    /// <summary>
    /// Attribute
    /// </summary>
    /// <param name="context"></param>
    public static void GenerateAttribute(IncrementalGeneratorPostInitializationContext context)
    {
        // DbCommand
        context.AddSource($"{CommonDefine.DbCommandAttributeFullName}.cs", $$"""
namespace {{CommonDefine.Namespace}};
using System;
[AttributeUsage(AttributeTargets.Class, AllowMultiple = false, Inherited = false)]
internal sealed class {{CommonDefine.DbCommandAttributeName}} : Attribute
{
    public {{CommonDefine.DbCommandAttributeName}}(string command)
    {
    }
}
""");
        // DbCommandParam
        context.AddSource($"{CommonDefine.DbCommandParamAttributeFullName}.cs", $$"""
namespace {{CommonDefine.Namespace}};
using System;
[AttributeUsage(AttributeTargets.Class, AllowMultiple = false, Inherited = false)]
internal sealed class {{CommonDefine.DbCommandParamAttributeName}}<ParamClass> : Attribute
{
    public {{CommonDefine.DbCommandParamAttributeName}}(string name)
    {
    }
}
""");
    }

    /// <summary>
    /// Source
    /// </summary>
    /// <param name="context"></param>
    /// <param name="source"></param>
    public static void GenerateSource(SourceProductionContext context, GeneratorAttributeSyntaxContext source)
    {
        try
        {
            var cancellationToken = context.CancellationToken;
            var semanticModel = source.SemanticModel;
            var typeSymbol = source.TargetSymbol as INamedTypeSymbol;
            if (typeSymbol == null)
            {
                return;
            }
            var classInfo = AnalyzeClassInfo.Analyze(typeSymbol, cancellationToken);
            var commandInfo = AnalyzeDbCommand.Analyze(classInfo, cancellationToken);
            //var DbCommand = AnalyzeDbTable.Analyze(classInfo, cancellationToken);
            //foreach (var dbColumn in DbCommand.DbQueries)
            //{
            //    dbColumn.PropertyName = dbColumn.DbTableInfo.ClassInfo.Type.ShortName + dbColumn.PropertyName;
            //}
            //(string TableClassName, string[] PropertyNames)[] enumKeyValueList = DbCommand.DbColumns.GroupBy(x => x.DbTableInfo).Select(x => (x.Key.ClassInfo.Type.ShortName, x.Select(x => x.PropertyName).ToArray())).ToArray();
            //
            //var dbColumns = DbCommand.DbColumns;
            //var dbQueries = DbCommand.DbQueries;

            // Source
            var sourceCode = $$"""
// <auto-generated/>
#nullable enable
#pragma warning disable CS8600
#pragma warning disable CS8601
#pragma warning disable CS8602
#pragma warning disable CS8603
#pragma warning disable CS8604

using System;
using System.Text;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;
using System.Linq;
using System.Runtime.CompilerServices;
using Npgsql;
using {{CommonDefine.Namespace}};

{{classInfo.Type.GetNamespaceDefine()}}

partial class {{classInfo.Type.ShortName}}
{

{{OutputSourceUtility.CreateDbType(Array.Empty<AnalyzeDbColumn>(), commandInfo.DbColumns, Array.Empty<(string, string)>())}}

    public static async IAsyncEnumerable<{{classInfo.Type.ShortName}}> ExecuteAsync(
        NpgsqlConnection connection,
        DbQueryType selectColumns,
{{commandInfo.ParamInfos.ForEachLines(paramInfo => $"{paramInfo.ParamType} {paramInfo.ParamName},").OutputLine(2)}}
        [EnumeratorCancellation] CancellationToken cancellationToken = default)
    {
        await using var command = new NpgsqlCommand("{{commandInfo.Command}}", connection);
{{commandInfo.ParamInfos.ForEachLines(paramInfo => $"command.Parameters.Add({paramInfo.DbParamType}.CreateParameter(\"{paramInfo.ParamName}\", {paramInfo.ParamName}));").OutputLine(2)}}
        await command.PrepareAsync(cancellationToken).ConfigureAwait(false);

        await using var reader = await command.ExecuteReaderAsync(cancellationToken).ConfigureAwait(false);
        var columns = new List<(DbQueryType type,int ordinal)>();
{{commandInfo.DbColumns.ForEachLines(paramInfo => $"selectColumns.HasFlag(DbQueryType.{paramInfo.PropertyName})".OutputIfStatement($"columns.Add((DbQueryType.{paramInfo.PropertyName}, reader.GetOrdinal(\"{paramInfo.DbColumnName}\")));").OutputLine(2)).OutputLine()}}

        while (await reader.ReadAsync(cancellationToken).ConfigureAwait(false))
        {
            var result = new {{classInfo.Type.ShortName}}();
            foreach(var (type, ordinal) in columns)
            {
{{commandInfo.DbColumns.ForEachLines(x => $"type == DbQueryType.{x.PropertyName}".OutputIfStatement(new[] { $"result.{x.PropertyName} = {x.ConverterType}.ReadData(reader, ordinal);", "continue;" }.ForEachLines(x => x)).OutputLine(4)).OutputLine()}}
            }
            yield return result;
        }
    }

    public static async ValueTask<int> ExecuteNonQueryAsync(
        NpgsqlConnection connection,
{{commandInfo.ParamInfos.ForEachLines(paramInfo => $"{paramInfo.ParamType} {paramInfo.ParamName},").OutputLine(2)}}
        CancellationToken cancellationToken = default)
    {
        await using var command = new NpgsqlCommand("{{commandInfo.Command}}", connection);
{{commandInfo.ParamInfos.ForEachLines(paramInfo => $"command.Parameters.Add({paramInfo.DbParamType}.CreateParameter(\"{paramInfo.ParamName}\", {paramInfo.ParamName}));").OutputLine(2)}}
        await command.PrepareAsync(cancellationToken).ConfigureAwait(false);

        var result = await command.ExecuteNonQueryAsync(cancellationToken).ConfigureAwait(false);
        return result;
    }

}

""";
            // AddSourceで出力
            context.AddSource($"{CommonDefine.DbCommandAttributeFullName}.{classInfo.Type.FullName}.g.cs", sourceCode);

        }
        catch (ReportDiagnosticException ex)
        {
            ex.Report(context);
        }
    }
}