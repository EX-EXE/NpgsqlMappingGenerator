using CodeAnalyzeUtility;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using NpgsqlMappingGenerator.Utility;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Reflection;
using System.Text;
using System.Xml.Linq;

namespace NpgsqlMappingGenerator.Generator;

public static class DbViewGenerator
{
    private static readonly string[] DbViewAttributeNames = new[]
    {
        $"{CommonDefine.Namespace}.{CommonDefine.DbTableAttributeName}",
        $"{CommonDefine.Namespace}.{CommonDefine.DbViewInnerJoinAttributeName}",
        $"{CommonDefine.Namespace}.{CommonDefine.DbViewLeftOuterJoinAttributeName}",
        $"{CommonDefine.Namespace}.{CommonDefine.DbViewRightOuterJoinAttributeName}",
        $"{CommonDefine.Namespace}.{CommonDefine.DbViewFullOuterJoinAttributeName}",
        $"{CommonDefine.Namespace}.{CommonDefine.DbViewCrossJoinAttributeName}",
    };

    /// <summary>
    /// Attribute
    /// </summary>
    /// <param name="context"></param>
    public static void GenerateAttribute(IncrementalGeneratorPostInitializationContext context)
    {
        // DbView
        context.AddSource($"{CommonDefine.DbViewAttributeFullName}.cs", $$"""
namespace {{CommonDefine.Namespace}};
using System;
[AttributeUsage(AttributeTargets.Class, AllowMultiple = false, Inherited = false)]
internal sealed class {{CommonDefine.DbViewAttributeName}} : Attribute
{
    public {{CommonDefine.DbViewAttributeName}}()
    {
    }
}
""");
        // DbViewTable
        context.AddSource($"{CommonDefine.DbViewTableAttributeFullName}.cs", $$"""
namespace {{CommonDefine.Namespace}};
using System;
[AttributeUsage(AttributeTargets.Class, AllowMultiple = false, Inherited = false)]
internal sealed class {{CommonDefine.DbViewTableAttributeName}}<TableClass> : Attribute
{
    public {{CommonDefine.DbViewTableAttributeName}}()
    {
    }
}
""");
        // DbViewColumn
        context.AddSource($"{CommonDefine.DbViewColumnAttributeFullName}.cs", $$"""
namespace {{CommonDefine.Namespace}};
using System;
[AttributeUsage(AttributeTargets.Class, AllowMultiple = true, Inherited = false)]
internal sealed class {{CommonDefine.DbViewColumnAttributeName}}<TableClass> : Attribute
{
    public {{CommonDefine.DbViewColumnAttributeName}}(string columnProperty,DbAggregateType aggregateType = DbAggregateType.None)
    {
    }
}
""");

        // Inner Join / Outer Join
        foreach (var tableJoinAttributeName in CommonDefine.DbViewInnerOrOuterJoinAttributeNames)
        {
            context.AddSource($"{CommonDefine.Namespace}.{tableJoinAttributeName}.cs", $$"""
namespace {{CommonDefine.Namespace}};
using System;
[AttributeUsage(AttributeTargets.Class, AllowMultiple = true, Inherited = false)]
internal sealed class {{tableJoinAttributeName}}<JoinTableClass,CompareTableClass> : Attribute
{
    public {{tableJoinAttributeName}}(string joinTableColumnProperty,string compareTableColumnProperty)
    {
    }
}
""");
        }
        // Cross Join
        context.AddSource($"{CommonDefine.DbViewCrossJoinAttributeFullName}.cs", $$"""
namespace {{CommonDefine.Namespace}};
using System;
[AttributeUsage(AttributeTargets.Class, AllowMultiple = true, Inherited = false)]
internal sealed class {{CommonDefine.DbViewCrossJoinAttributeName}}<JoinTableClass> : Attribute
{
    public {{CommonDefine.DbViewCrossJoinAttributeName}}()
    {
    }
}
""");
    }

    /// <summary>
    /// Source
    /// </summary>
    /// <param name="context"></param>
    /// <param name="source"></param>
    public static void GenerateSource(SourceProductionContext context, GeneratorAttributeSyntaxContext source)
    {
        var cancellationToken = context.CancellationToken;
        var semanticModel = source.SemanticModel;
        var typeSymbol = source.TargetSymbol as INamedTypeSymbol;
        if (typeSymbol == null)
        {
            return;
        }
        var classInfo = AnalyzeClassInfo.Analyze(typeSymbol, cancellationToken);
        var dbView = AnalyzeDbView.Analyze(classInfo, cancellationToken);
        foreach (var dbColumn in dbView.DbQueries)
        {
            dbColumn.DbColumnName = $"{dbColumn.DbTableInfo.DbTableQuery}.{dbColumn.DbColumnName}";
            dbColumn.PropertyName = dbColumn.DbTableInfo.ClassInfo.Type.ShortName + dbColumn.PropertyName;
        }
        (string TableClassName, string[] PropertyNames)[] enumKeyValueList = dbView.DbColumns.GroupBy(x => x.DbTableInfo).Select(x => (x.Key.ClassInfo.Type.ShortName, x.Select(x => x.PropertyName).ToArray())).ToArray();

        var dbColumns = dbView.DbColumns;
        var dbQueries = dbView.DbQueries;

        // Source
        var sourceCode = $$"""
// <auto-generated/>
#nullable enable
#pragma warning disable CS8600
#pragma warning disable CS8601
#pragma warning disable CS8602
#pragma warning disable CS8603
#pragma warning disable CS8604

using System;
using System.Text;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;
using System.Linq;
using System.Runtime.CompilerServices;
using Npgsql;
using {{CommonDefine.Namespace}};

{{classInfo.Type.GetNamespaceDefine()}}

partial class {{classInfo.Type.ShortName}}
{
{{OutputSourceUtility.CreateDbTableProperty(dbView.BaseTable)}}
{{OutputSourceUtility.CreateColumnProperty(dbQueries)}}

{{OutputSourceUtility.CreateDbType(dbColumns, dbQueries, enumKeyValueList.Select(x => ($"All{x.TableClassName}", x.PropertyNames.OutputLine("|"))).ToArray())}}

{{OutputSourceUtility.CreateDbParam(dbQueries)}}

{{OutputSourceUtility.CreateDbCondition()}}
{{OutputSourceUtility.CreateDbOrder()}}

{{OutputSourceUtility.CreateDbSelect(classInfo.Type.ShortName, dbQueries, dbView.JoinQuery)}}

}

""";
        // AddSourceで出力
        context.AddSource($"{CommonDefine.DbViewAttributeFullName}.{classInfo.Type.FullName}.g.cs", sourceCode);
    }
}